#![doc = "Peripheral access API for EFM32PG22C200F512IM40 microcontrollers (generated using svd2rust v0.24.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.24.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![deny(const_err)]
#![deny(dead_code)]
#![deny(improper_ctypes)]
#![deny(missing_docs)]
#![deny(no_mangle_generic_items)]
#![deny(non_shorthand_field_patterns)]
#![deny(overflowing_literals)]
#![deny(path_statements)]
#![deny(patterns_in_fns_without_body)]
#![deny(private_in_public)]
#![deny(unconditional_recursion)]
#![deny(unused_allocation)]
#![deny(unused_comparisons)]
#![deny(unused_parens)]
#![deny(while_true)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
use core::marker::PhantomData;
use core::ops::Deref;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn CRYPTOACC();
    fn TRNG();
    fn PKE();
    fn SMU_SECURE();
    fn SMU_S_PRIVILEGED();
    fn EMU();
    fn TIMER0();
    fn TIMER1();
    fn TIMER2();
    fn TIMER3();
    fn TIMER4();
    fn RTCC();
    fn USART0_RX();
    fn USART0_TX();
    fn USART1_RX();
    fn USART1_TX();
    fn ICACHE0();
    fn BURTC();
    fn LETIMER0();
    fn SYSCFG();
    fn LDMA();
    fn LFXO();
    fn LFRCO();
    fn ULFRCO();
    fn GPIO_ODD();
    fn GPIO_EVEN();
    fn I2C0();
    fn I2C1();
    fn EMUDG();
    fn EMUSE();
    fn WDOG0();
    fn HFXO0();
    fn HFRCO0();
    fn CMU();
    fn IADC();
    fn MSC();
    fn DPLL0();
    fn SW0();
    fn SW1();
    fn SW2();
    fn SW3();
}
#[doc(hidden)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 56] = [
    Vector {
        _handler: CRYPTOACC,
    },
    Vector { _handler: TRNG },
    Vector { _handler: PKE },
    Vector {
        _handler: SMU_SECURE,
    },
    Vector {
        _handler: SMU_S_PRIVILEGED,
    },
    Vector { _reserved: 0 },
    Vector { _handler: EMU },
    Vector { _handler: TIMER0 },
    Vector { _handler: TIMER1 },
    Vector { _handler: TIMER2 },
    Vector { _handler: TIMER3 },
    Vector { _handler: TIMER4 },
    Vector { _handler: RTCC },
    Vector {
        _handler: USART0_RX,
    },
    Vector {
        _handler: USART0_TX,
    },
    Vector {
        _handler: USART1_RX,
    },
    Vector {
        _handler: USART1_TX,
    },
    Vector { _handler: ICACHE0 },
    Vector { _handler: BURTC },
    Vector { _handler: LETIMER0 },
    Vector { _handler: SYSCFG },
    Vector { _handler: LDMA },
    Vector { _handler: LFXO },
    Vector { _handler: LFRCO },
    Vector { _handler: ULFRCO },
    Vector { _handler: GPIO_ODD },
    Vector {
        _handler: GPIO_EVEN,
    },
    Vector { _handler: I2C0 },
    Vector { _handler: I2C1 },
    Vector { _handler: EMUDG },
    Vector { _handler: EMUSE },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: WDOG0 },
    Vector { _handler: HFXO0 },
    Vector { _handler: HFRCO0 },
    Vector { _handler: CMU },
    Vector { _reserved: 0 },
    Vector { _handler: IADC },
    Vector { _handler: MSC },
    Vector { _handler: DPLL0 },
    Vector { _reserved: 0 },
    Vector { _handler: SW0 },
    Vector { _handler: SW1 },
    Vector { _handler: SW2 },
    Vector { _handler: SW3 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - CRYPTOACC"]
    CRYPTOACC = 0,
    #[doc = "1 - TRNG"]
    TRNG = 1,
    #[doc = "2 - PKE"]
    PKE = 2,
    #[doc = "3 - SMU_SECURE"]
    SMU_SECURE = 3,
    #[doc = "4 - SMU_S_PRIVILEGED"]
    SMU_S_PRIVILEGED = 4,
    #[doc = "6 - EMU"]
    EMU = 6,
    #[doc = "7 - TIMER0"]
    TIMER0 = 7,
    #[doc = "8 - TIMER1"]
    TIMER1 = 8,
    #[doc = "9 - TIMER2"]
    TIMER2 = 9,
    #[doc = "10 - TIMER3"]
    TIMER3 = 10,
    #[doc = "11 - TIMER4"]
    TIMER4 = 11,
    #[doc = "12 - RTCC"]
    RTCC = 12,
    #[doc = "13 - USART0_RX"]
    USART0_RX = 13,
    #[doc = "14 - USART0_TX"]
    USART0_TX = 14,
    #[doc = "15 - USART1_RX"]
    USART1_RX = 15,
    #[doc = "16 - USART1_TX"]
    USART1_TX = 16,
    #[doc = "17 - ICACHE0"]
    ICACHE0 = 17,
    #[doc = "18 - BURTC"]
    BURTC = 18,
    #[doc = "19 - LETIMER0"]
    LETIMER0 = 19,
    #[doc = "20 - SYSCFG"]
    SYSCFG = 20,
    #[doc = "21 - LDMA"]
    LDMA = 21,
    #[doc = "22 - LFXO"]
    LFXO = 22,
    #[doc = "23 - LFRCO"]
    LFRCO = 23,
    #[doc = "24 - ULFRCO"]
    ULFRCO = 24,
    #[doc = "25 - GPIO_ODD"]
    GPIO_ODD = 25,
    #[doc = "26 - GPIO_EVEN"]
    GPIO_EVEN = 26,
    #[doc = "27 - I2C0"]
    I2C0 = 27,
    #[doc = "28 - I2C1"]
    I2C1 = 28,
    #[doc = "29 - EMUDG"]
    EMUDG = 29,
    #[doc = "30 - EMUSE"]
    EMUSE = 30,
    #[doc = "43 - WDOG0"]
    WDOG0 = 43,
    #[doc = "44 - HFXO0"]
    HFXO0 = 44,
    #[doc = "45 - HFRCO0"]
    HFRCO0 = 45,
    #[doc = "46 - CMU"]
    CMU = 46,
    #[doc = "48 - IADC"]
    IADC = 48,
    #[doc = "49 - MSC"]
    MSC = 49,
    #[doc = "50 - DPLL0"]
    DPLL0 = 50,
    #[doc = "52 - SW0"]
    SW0 = 52,
    #[doc = "53 - SW1"]
    SW1 = 53,
    #[doc = "54 - SW2"]
    SW2 = 54,
    #[doc = "55 - SW3"]
    SW3 = 55,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "EMU_S Registers"]
pub struct EMU_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EMU_S {}
impl EMU_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const emu_s::RegisterBlock = 0x4000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const emu_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EMU_S {
    type Target = emu_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EMU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EMU_S").finish()
    }
}
#[doc = "EMU_S Registers"]
pub mod emu_s;
#[doc = "CMU_S Registers"]
pub struct CMU_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMU_S {}
impl CMU_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmu_s::RegisterBlock = 0x4000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmu_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMU_S {
    type Target = cmu_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMU_S").finish()
    }
}
#[doc = "CMU_S Registers"]
pub mod cmu_s;
#[doc = "HFXO0_S Registers"]
pub struct HFXO0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HFXO0_S {}
impl HFXO0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hfxo0_s::RegisterBlock = 0x4000_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hfxo0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HFXO0_S {
    type Target = hfxo0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HFXO0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HFXO0_S").finish()
    }
}
#[doc = "HFXO0_S Registers"]
pub mod hfxo0_s;
#[doc = "HFRCO0_S Registers"]
pub struct HFRCO0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HFRCO0_S {}
impl HFRCO0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hfrco0_s::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hfrco0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HFRCO0_S {
    type Target = hfrco0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HFRCO0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HFRCO0_S").finish()
    }
}
#[doc = "HFRCO0_S Registers"]
pub mod hfrco0_s;
#[doc = "FSRCO_S Registers"]
pub struct FSRCO_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FSRCO_S {}
impl FSRCO_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fsrco_s::RegisterBlock = 0x4001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fsrco_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FSRCO_S {
    type Target = fsrco_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FSRCO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FSRCO_S").finish()
    }
}
#[doc = "FSRCO_S Registers"]
pub mod fsrco_s;
#[doc = "DPLL0_S Registers"]
pub struct DPLL0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DPLL0_S {}
impl DPLL0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dpll0_s::RegisterBlock = 0x4001_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dpll0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DPLL0_S {
    type Target = dpll0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DPLL0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DPLL0_S").finish()
    }
}
#[doc = "DPLL0_S Registers"]
pub mod dpll0_s;
#[doc = "LFXO_S Registers"]
pub struct LFXO_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LFXO_S {}
impl LFXO_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lfxo_s::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lfxo_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LFXO_S {
    type Target = lfxo_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LFXO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LFXO_S").finish()
    }
}
#[doc = "LFXO_S Registers"]
pub mod lfxo_s;
#[doc = "LFRCO_S Registers"]
pub struct LFRCO_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LFRCO_S {}
impl LFRCO_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lfrco_s::RegisterBlock = 0x4002_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lfrco_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LFRCO_S {
    type Target = lfrco_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LFRCO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LFRCO_S").finish()
    }
}
#[doc = "LFRCO_S Registers"]
pub mod lfrco_s;
#[doc = "ULFRCO_S Registers"]
pub struct ULFRCO_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ULFRCO_S {}
impl ULFRCO_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ulfrco_s::RegisterBlock = 0x4002_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ulfrco_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ULFRCO_S {
    type Target = ulfrco_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ULFRCO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ULFRCO_S").finish()
    }
}
#[doc = "ULFRCO_S Registers"]
pub mod ulfrco_s;
#[doc = "MSC_S Registers"]
pub struct MSC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MSC_S {}
impl MSC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const msc_s::RegisterBlock = 0x4003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const msc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MSC_S {
    type Target = msc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MSC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MSC_S").finish()
    }
}
#[doc = "MSC_S Registers"]
pub mod msc_s;
#[doc = "ICACHE0_S Registers"]
pub struct ICACHE0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ICACHE0_S {}
impl ICACHE0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const icache0_s::RegisterBlock = 0x4003_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const icache0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ICACHE0_S {
    type Target = icache0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ICACHE0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE0_S").finish()
    }
}
#[doc = "ICACHE0_S Registers"]
pub mod icache0_s;
#[doc = "PRS_S Registers"]
pub struct PRS_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PRS_S {}
impl PRS_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const prs_s::RegisterBlock = 0x4003_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const prs_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PRS_S {
    type Target = prs_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PRS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PRS_S").finish()
    }
}
#[doc = "PRS_S Registers"]
pub mod prs_s;
#[doc = "GPIO_S Registers"]
pub struct GPIO_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO_S {}
impl GPIO_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_s::RegisterBlock = 0x4003_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO_S {
    type Target = gpio_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_S").finish()
    }
}
#[doc = "GPIO_S Registers"]
pub mod gpio_s;
#[doc = "LDMA_S Registers"]
pub struct LDMA_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LDMA_S {}
impl LDMA_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ldma_s::RegisterBlock = 0x4004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ldma_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LDMA_S {
    type Target = ldma_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LDMA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LDMA_S").finish()
    }
}
#[doc = "LDMA_S Registers"]
pub mod ldma_s;
#[doc = "LDMAXBAR_S Registers"]
pub struct LDMAXBAR_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LDMAXBAR_S {}
impl LDMAXBAR_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ldmaxbar_s::RegisterBlock = 0x4004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ldmaxbar_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LDMAXBAR_S {
    type Target = ldmaxbar_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LDMAXBAR_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LDMAXBAR_S").finish()
    }
}
#[doc = "LDMAXBAR_S Registers"]
pub mod ldmaxbar_s;
#[doc = "TIMER0_S Registers"]
pub struct TIMER0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER0_S {}
impl TIMER0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer0_s::RegisterBlock = 0x4004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER0_S {
    type Target = timer0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER0_S").finish()
    }
}
#[doc = "TIMER0_S Registers"]
pub mod timer0_s;
#[doc = "TIMER1_S Registers"]
pub struct TIMER1_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER1_S {}
impl TIMER1_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1_s::RegisterBlock = 0x4004_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER1_S {
    type Target = timer1_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER1_S").finish()
    }
}
#[doc = "TIMER1_S Registers"]
pub mod timer1_s;
#[doc = "TIMER2_S Registers"]
pub struct TIMER2_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER2_S {}
impl TIMER2_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer2_s::RegisterBlock = 0x4005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer2_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER2_S {
    type Target = timer2_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER2_S").finish()
    }
}
#[doc = "TIMER2_S Registers"]
pub mod timer2_s;
#[doc = "TIMER3_S Registers"]
pub struct TIMER3_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER3_S {}
impl TIMER3_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer3_s::RegisterBlock = 0x4005_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer3_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER3_S {
    type Target = timer3_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER3_S").finish()
    }
}
#[doc = "TIMER3_S Registers"]
pub mod timer3_s;
#[doc = "TIMER4_S Registers"]
pub struct TIMER4_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER4_S {}
impl TIMER4_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer4_s::RegisterBlock = 0x4005_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer4_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER4_S {
    type Target = timer4_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER4_S").finish()
    }
}
#[doc = "TIMER4_S Registers"]
pub mod timer4_s;
#[doc = "USART0_S Registers"]
pub struct USART0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART0_S {}
impl USART0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart0_s::RegisterBlock = 0x4005_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART0_S {
    type Target = usart0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART0_S").finish()
    }
}
#[doc = "USART0_S Registers"]
pub mod usart0_s;
#[doc = "USART1_S Registers"]
pub struct USART1_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1_S {}
impl USART1_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart1_s::RegisterBlock = 0x4006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART1_S {
    type Target = usart1_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1_S").finish()
    }
}
#[doc = "USART1_S Registers"]
pub mod usart1_s;
#[doc = "BURTC_S Registers"]
pub struct BURTC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BURTC_S {}
impl BURTC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const burtc_s::RegisterBlock = 0x4006_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const burtc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BURTC_S {
    type Target = burtc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BURTC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BURTC_S").finish()
    }
}
#[doc = "BURTC_S Registers"]
pub mod burtc_s;
#[doc = "I2C1_S Registers"]
pub struct I2C1_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1_S {}
impl I2C1_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1_s::RegisterBlock = 0x4006_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1_S {
    type Target = i2c1_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1_S").finish()
    }
}
#[doc = "I2C1_S Registers"]
pub mod i2c1_s;
#[doc = "SYSCFG_S_CFGNS Registers"]
pub struct SYSCFG_S_CFGNS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG_S_CFGNS {}
impl SYSCFG_S_CFGNS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const syscfg_s_cfgns::RegisterBlock = 0x4007_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg_s_cfgns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCFG_S_CFGNS {
    type Target = syscfg_s_cfgns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCFG_S_CFGNS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG_S_CFGNS").finish()
    }
}
#[doc = "SYSCFG_S_CFGNS Registers"]
pub mod syscfg_s_cfgns;
#[doc = "SYSCFG_S Registers"]
pub struct SYSCFG_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG_S {}
impl SYSCFG_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const syscfg_s::RegisterBlock = 0x4007_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCFG_S {
    type Target = syscfg_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCFG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG_S").finish()
    }
}
#[doc = "SYSCFG_S Registers"]
pub mod syscfg_s;
#[doc = "BURAM_S Registers"]
pub struct BURAM_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BURAM_S {}
impl BURAM_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const buram_s::RegisterBlock = 0x4008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const buram_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BURAM_S {
    type Target = buram_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BURAM_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BURAM_S").finish()
    }
}
#[doc = "BURAM_S Registers"]
pub mod buram_s;
#[doc = "GPCRC_S Registers"]
pub struct GPCRC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPCRC_S {}
impl GPCRC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpcrc_s::RegisterBlock = 0x4008_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpcrc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPCRC_S {
    type Target = gpcrc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPCRC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPCRC_S").finish()
    }
}
#[doc = "GPCRC_S Registers"]
pub mod gpcrc_s;
#[doc = "DCDC_S Registers"]
pub struct DCDC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCDC_S {}
impl DCDC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dcdc_s::RegisterBlock = 0x4009_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dcdc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCDC_S {
    type Target = dcdc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCDC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCDC_S").finish()
    }
}
#[doc = "DCDC_S Registers"]
pub mod dcdc_s;
#[doc = "PDM_S Registers"]
pub struct PDM_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PDM_S {}
impl PDM_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pdm_s::RegisterBlock = 0x4009_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pdm_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PDM_S {
    type Target = pdm_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PDM_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PDM_S").finish()
    }
}
#[doc = "PDM_S Registers"]
pub mod pdm_s;
#[doc = "SMU_S Registers"]
pub struct SMU_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SMU_S {}
impl SMU_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const smu_s::RegisterBlock = 0x4400_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const smu_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SMU_S {
    type Target = smu_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SMU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SMU_S").finish()
    }
}
#[doc = "SMU_S Registers"]
pub mod smu_s;
#[doc = "SMU_S_CFGNS Registers"]
pub struct SMU_S_CFGNS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SMU_S_CFGNS {}
impl SMU_S_CFGNS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const smu_s_cfgns::RegisterBlock = 0x4400_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const smu_s_cfgns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SMU_S_CFGNS {
    type Target = smu_s_cfgns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SMU_S_CFGNS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SMU_S_CFGNS").finish()
    }
}
#[doc = "SMU_S_CFGNS Registers"]
pub mod smu_s_cfgns;
#[doc = "RTCC_S Registers"]
pub struct RTCC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTCC_S {}
impl RTCC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtcc_s::RegisterBlock = 0x4800_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtcc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTCC_S {
    type Target = rtcc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTCC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTCC_S").finish()
    }
}
#[doc = "RTCC_S Registers"]
pub mod rtcc_s;
#[doc = "LETIMER0_S Registers"]
pub struct LETIMER0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LETIMER0_S {}
impl LETIMER0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const letimer0_s::RegisterBlock = 0x4a00_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const letimer0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LETIMER0_S {
    type Target = letimer0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LETIMER0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LETIMER0_S").finish()
    }
}
#[doc = "LETIMER0_S Registers"]
pub mod letimer0_s;
#[doc = "IADC0_S Registers"]
pub struct IADC0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IADC0_S {}
impl IADC0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iadc0_s::RegisterBlock = 0x4a00_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iadc0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IADC0_S {
    type Target = iadc0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IADC0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IADC0_S").finish()
    }
}
#[doc = "IADC0_S Registers"]
pub mod iadc0_s;
#[doc = "I2C0_S Registers"]
pub struct I2C0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0_S {}
impl I2C0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0_s::RegisterBlock = 0x4a01_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C0_S {
    type Target = i2c0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C0_S").finish()
    }
}
#[doc = "I2C0_S Registers"]
pub mod i2c0_s;
#[doc = "WDOG0_S Registers"]
pub struct WDOG0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDOG0_S {}
impl WDOG0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdog0_s::RegisterBlock = 0x4a01_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdog0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDOG0_S {
    type Target = wdog0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDOG0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDOG0_S").finish()
    }
}
#[doc = "WDOG0_S Registers"]
pub mod wdog0_s;
#[doc = "AMUXCP0_S Registers"]
pub struct AMUXCP0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AMUXCP0_S {}
impl AMUXCP0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const amuxcp0_s::RegisterBlock = 0x4a02_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const amuxcp0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AMUXCP0_S {
    type Target = amuxcp0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AMUXCP0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AMUXCP0_S").finish()
    }
}
#[doc = "AMUXCP0_S Registers"]
pub mod amuxcp0_s;
#[doc = "EUART0_S Registers"]
pub struct EUART0_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EUART0_S {}
impl EUART0_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const euart0_s::RegisterBlock = 0x4a03_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const euart0_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EUART0_S {
    type Target = euart0_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EUART0_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EUART0_S").finish()
    }
}
#[doc = "EUART0_S Registers"]
pub mod euart0_s;
#[doc = "CRYPTOACC_S Registers"]
pub struct CRYPTOACC_S {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_S {}
impl CRYPTOACC_S {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_s::RegisterBlock = 0x4c02_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_s::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_S {
    type Target = cryptoacc_s::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_S").finish()
    }
}
#[doc = "CRYPTOACC_S Registers"]
pub mod cryptoacc_s;
#[doc = "CRYPTOACC_S_RNGCTRL Registers"]
pub struct CRYPTOACC_S_RNGCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_S_RNGCTRL {}
impl CRYPTOACC_S_RNGCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_s_rngctrl::RegisterBlock = 0x4c02_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_s_rngctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_S_RNGCTRL {
    type Target = cryptoacc_s_rngctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_S_RNGCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_S_RNGCTRL").finish()
    }
}
#[doc = "CRYPTOACC_S_RNGCTRL Registers"]
pub mod cryptoacc_s_rngctrl;
#[doc = "CRYPTOACC_S_PKCTRL Registers"]
pub struct CRYPTOACC_S_PKCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_S_PKCTRL {}
impl CRYPTOACC_S_PKCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_s_pkctrl::RegisterBlock = 0x4c02_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_s_pkctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_S_PKCTRL {
    type Target = cryptoacc_s_pkctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_S_PKCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_S_PKCTRL").finish()
    }
}
#[doc = "CRYPTOACC_S_PKCTRL Registers"]
pub mod cryptoacc_s_pkctrl;
#[doc = "EMU_NS Registers"]
pub struct EMU_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EMU_NS {}
impl EMU_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const emu_ns::RegisterBlock = 0x5000_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const emu_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EMU_NS {
    type Target = emu_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EMU_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EMU_NS").finish()
    }
}
#[doc = "EMU_NS Registers"]
pub mod emu_ns;
#[doc = "CMU_NS Registers"]
pub struct CMU_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CMU_NS {}
impl CMU_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cmu_ns::RegisterBlock = 0x5000_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cmu_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CMU_NS {
    type Target = cmu_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CMU_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CMU_NS").finish()
    }
}
#[doc = "CMU_NS Registers"]
pub mod cmu_ns;
#[doc = "HFXO0_NS Registers"]
pub struct HFXO0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HFXO0_NS {}
impl HFXO0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hfxo0_ns::RegisterBlock = 0x5000_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hfxo0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HFXO0_NS {
    type Target = hfxo0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HFXO0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HFXO0_NS").finish()
    }
}
#[doc = "HFXO0_NS Registers"]
pub mod hfxo0_ns;
#[doc = "HFRCO0_NS Registers"]
pub struct HFRCO0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for HFRCO0_NS {}
impl HFRCO0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const hfrco0_ns::RegisterBlock = 0x5001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const hfrco0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for HFRCO0_NS {
    type Target = hfrco0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for HFRCO0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HFRCO0_NS").finish()
    }
}
#[doc = "HFRCO0_NS Registers"]
pub mod hfrco0_ns;
#[doc = "FSRCO_NS Registers"]
pub struct FSRCO_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for FSRCO_NS {}
impl FSRCO_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fsrco_ns::RegisterBlock = 0x5001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fsrco_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for FSRCO_NS {
    type Target = fsrco_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for FSRCO_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FSRCO_NS").finish()
    }
}
#[doc = "FSRCO_NS Registers"]
pub mod fsrco_ns;
#[doc = "DPLL0_NS Registers"]
pub struct DPLL0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DPLL0_NS {}
impl DPLL0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dpll0_ns::RegisterBlock = 0x5001_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dpll0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DPLL0_NS {
    type Target = dpll0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DPLL0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DPLL0_NS").finish()
    }
}
#[doc = "DPLL0_NS Registers"]
pub mod dpll0_ns;
#[doc = "LFXO_NS Registers"]
pub struct LFXO_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LFXO_NS {}
impl LFXO_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lfxo_ns::RegisterBlock = 0x5002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lfxo_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LFXO_NS {
    type Target = lfxo_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LFXO_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LFXO_NS").finish()
    }
}
#[doc = "LFXO_NS Registers"]
pub mod lfxo_ns;
#[doc = "LFRCO_NS Registers"]
pub struct LFRCO_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LFRCO_NS {}
impl LFRCO_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const lfrco_ns::RegisterBlock = 0x5002_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const lfrco_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LFRCO_NS {
    type Target = lfrco_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LFRCO_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LFRCO_NS").finish()
    }
}
#[doc = "LFRCO_NS Registers"]
pub mod lfrco_ns;
#[doc = "ULFRCO_NS Registers"]
pub struct ULFRCO_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ULFRCO_NS {}
impl ULFRCO_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ulfrco_ns::RegisterBlock = 0x5002_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ulfrco_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ULFRCO_NS {
    type Target = ulfrco_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ULFRCO_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ULFRCO_NS").finish()
    }
}
#[doc = "ULFRCO_NS Registers"]
pub mod ulfrco_ns;
#[doc = "MSC_NS Registers"]
pub struct MSC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for MSC_NS {}
impl MSC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const msc_ns::RegisterBlock = 0x5003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const msc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for MSC_NS {
    type Target = msc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for MSC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MSC_NS").finish()
    }
}
#[doc = "MSC_NS Registers"]
pub mod msc_ns;
#[doc = "ICACHE0_NS Registers"]
pub struct ICACHE0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for ICACHE0_NS {}
impl ICACHE0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const icache0_ns::RegisterBlock = 0x5003_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const icache0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for ICACHE0_NS {
    type Target = icache0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for ICACHE0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE0_NS").finish()
    }
}
#[doc = "ICACHE0_NS Registers"]
pub mod icache0_ns;
#[doc = "PRS_NS Registers"]
pub struct PRS_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PRS_NS {}
impl PRS_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const prs_ns::RegisterBlock = 0x5003_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const prs_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PRS_NS {
    type Target = prs_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PRS_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PRS_NS").finish()
    }
}
#[doc = "PRS_NS Registers"]
pub mod prs_ns;
#[doc = "GPIO_NS Registers"]
pub struct GPIO_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPIO_NS {}
impl GPIO_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpio_ns::RegisterBlock = 0x5003_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpio_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPIO_NS {
    type Target = gpio_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPIO_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIO_NS").finish()
    }
}
#[doc = "GPIO_NS Registers"]
pub mod gpio_ns;
#[doc = "LDMA_NS Registers"]
pub struct LDMA_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LDMA_NS {}
impl LDMA_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ldma_ns::RegisterBlock = 0x5004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ldma_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LDMA_NS {
    type Target = ldma_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LDMA_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LDMA_NS").finish()
    }
}
#[doc = "LDMA_NS Registers"]
pub mod ldma_ns;
#[doc = "LDMAXBAR_NS Registers"]
pub struct LDMAXBAR_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LDMAXBAR_NS {}
impl LDMAXBAR_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ldmaxbar_ns::RegisterBlock = 0x5004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ldmaxbar_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LDMAXBAR_NS {
    type Target = ldmaxbar_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LDMAXBAR_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LDMAXBAR_NS").finish()
    }
}
#[doc = "LDMAXBAR_NS Registers"]
pub mod ldmaxbar_ns;
#[doc = "TIMER0_NS Registers"]
pub struct TIMER0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER0_NS {}
impl TIMER0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer0_ns::RegisterBlock = 0x5004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER0_NS {
    type Target = timer0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER0_NS").finish()
    }
}
#[doc = "TIMER0_NS Registers"]
pub mod timer0_ns;
#[doc = "TIMER1_NS Registers"]
pub struct TIMER1_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER1_NS {}
impl TIMER1_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1_ns::RegisterBlock = 0x5004_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER1_NS {
    type Target = timer1_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER1_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER1_NS").finish()
    }
}
#[doc = "TIMER1_NS Registers"]
pub mod timer1_ns;
#[doc = "TIMER2_NS Registers"]
pub struct TIMER2_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER2_NS {}
impl TIMER2_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer2_ns::RegisterBlock = 0x5005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer2_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER2_NS {
    type Target = timer2_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER2_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER2_NS").finish()
    }
}
#[doc = "TIMER2_NS Registers"]
pub mod timer2_ns;
#[doc = "TIMER3_NS Registers"]
pub struct TIMER3_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER3_NS {}
impl TIMER3_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer3_ns::RegisterBlock = 0x5005_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer3_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER3_NS {
    type Target = timer3_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER3_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER3_NS").finish()
    }
}
#[doc = "TIMER3_NS Registers"]
pub mod timer3_ns;
#[doc = "TIMER4_NS Registers"]
pub struct TIMER4_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for TIMER4_NS {}
impl TIMER4_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer4_ns::RegisterBlock = 0x5005_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer4_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for TIMER4_NS {
    type Target = timer4_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for TIMER4_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIMER4_NS").finish()
    }
}
#[doc = "TIMER4_NS Registers"]
pub mod timer4_ns;
#[doc = "USART0_NS Registers"]
pub struct USART0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART0_NS {}
impl USART0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart0_ns::RegisterBlock = 0x5005_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART0_NS {
    type Target = usart0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART0_NS").finish()
    }
}
#[doc = "USART0_NS Registers"]
pub mod usart0_ns;
#[doc = "USART1_NS Registers"]
pub struct USART1_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for USART1_NS {}
impl USART1_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart1_ns::RegisterBlock = 0x5006_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart1_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for USART1_NS {
    type Target = usart1_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for USART1_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1_NS").finish()
    }
}
#[doc = "USART1_NS Registers"]
pub mod usart1_ns;
#[doc = "BURTC_NS Registers"]
pub struct BURTC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BURTC_NS {}
impl BURTC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const burtc_ns::RegisterBlock = 0x5006_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const burtc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BURTC_NS {
    type Target = burtc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BURTC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BURTC_NS").finish()
    }
}
#[doc = "BURTC_NS Registers"]
pub mod burtc_ns;
#[doc = "I2C1_NS Registers"]
pub struct I2C1_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C1_NS {}
impl I2C1_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c1_ns::RegisterBlock = 0x5006_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c1_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C1_NS {
    type Target = i2c1_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C1_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1_NS").finish()
    }
}
#[doc = "I2C1_NS Registers"]
pub mod i2c1_ns;
#[doc = "SYSCFG_NS_CFGNS Registers"]
pub struct SYSCFG_NS_CFGNS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG_NS_CFGNS {}
impl SYSCFG_NS_CFGNS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const syscfg_ns_cfgns::RegisterBlock = 0x5007_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg_ns_cfgns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCFG_NS_CFGNS {
    type Target = syscfg_ns_cfgns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCFG_NS_CFGNS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG_NS_CFGNS").finish()
    }
}
#[doc = "SYSCFG_NS_CFGNS Registers"]
pub mod syscfg_ns_cfgns;
#[doc = "SYSCFG_NS Registers"]
pub struct SYSCFG_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SYSCFG_NS {}
impl SYSCFG_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const syscfg_ns::RegisterBlock = 0x5007_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const syscfg_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SYSCFG_NS {
    type Target = syscfg_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SYSCFG_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG_NS").finish()
    }
}
#[doc = "SYSCFG_NS Registers"]
pub mod syscfg_ns;
#[doc = "BURAM_NS Registers"]
pub struct BURAM_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for BURAM_NS {}
impl BURAM_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const buram_ns::RegisterBlock = 0x5008_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const buram_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for BURAM_NS {
    type Target = buram_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for BURAM_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BURAM_NS").finish()
    }
}
#[doc = "BURAM_NS Registers"]
pub mod buram_ns;
#[doc = "GPCRC_NS Registers"]
pub struct GPCRC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for GPCRC_NS {}
impl GPCRC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpcrc_ns::RegisterBlock = 0x5008_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpcrc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for GPCRC_NS {
    type Target = gpcrc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for GPCRC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPCRC_NS").finish()
    }
}
#[doc = "GPCRC_NS Registers"]
pub mod gpcrc_ns;
#[doc = "DCDC_NS Registers"]
pub struct DCDC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DCDC_NS {}
impl DCDC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dcdc_ns::RegisterBlock = 0x5009_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dcdc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DCDC_NS {
    type Target = dcdc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DCDC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCDC_NS").finish()
    }
}
#[doc = "DCDC_NS Registers"]
pub mod dcdc_ns;
#[doc = "PDM_NS Registers"]
pub struct PDM_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for PDM_NS {}
impl PDM_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pdm_ns::RegisterBlock = 0x5009_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pdm_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for PDM_NS {
    type Target = pdm_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for PDM_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PDM_NS").finish()
    }
}
#[doc = "PDM_NS Registers"]
pub mod pdm_ns;
#[doc = "SMU_NS Registers"]
pub struct SMU_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SMU_NS {}
impl SMU_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const smu_ns::RegisterBlock = 0x5400_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const smu_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SMU_NS {
    type Target = smu_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SMU_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SMU_NS").finish()
    }
}
#[doc = "SMU_NS Registers"]
pub mod smu_ns;
#[doc = "SMU_NS_CFGNS Registers"]
pub struct SMU_NS_CFGNS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for SMU_NS_CFGNS {}
impl SMU_NS_CFGNS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const smu_ns_cfgns::RegisterBlock = 0x5400_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const smu_ns_cfgns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for SMU_NS_CFGNS {
    type Target = smu_ns_cfgns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for SMU_NS_CFGNS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SMU_NS_CFGNS").finish()
    }
}
#[doc = "SMU_NS_CFGNS Registers"]
pub mod smu_ns_cfgns;
#[doc = "RTCC_NS Registers"]
pub struct RTCC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for RTCC_NS {}
impl RTCC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtcc_ns::RegisterBlock = 0x5800_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtcc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for RTCC_NS {
    type Target = rtcc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for RTCC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTCC_NS").finish()
    }
}
#[doc = "RTCC_NS Registers"]
pub mod rtcc_ns;
#[doc = "LETIMER0_NS Registers"]
pub struct LETIMER0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for LETIMER0_NS {}
impl LETIMER0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const letimer0_ns::RegisterBlock = 0x5a00_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const letimer0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for LETIMER0_NS {
    type Target = letimer0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for LETIMER0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LETIMER0_NS").finish()
    }
}
#[doc = "LETIMER0_NS Registers"]
pub mod letimer0_ns;
#[doc = "IADC0_NS Registers"]
pub struct IADC0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IADC0_NS {}
impl IADC0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const iadc0_ns::RegisterBlock = 0x5a00_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const iadc0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for IADC0_NS {
    type Target = iadc0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IADC0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IADC0_NS").finish()
    }
}
#[doc = "IADC0_NS Registers"]
pub mod iadc0_ns;
#[doc = "I2C0_NS Registers"]
pub struct I2C0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2C0_NS {}
impl I2C0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0_ns::RegisterBlock = 0x5a01_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for I2C0_NS {
    type Target = i2c0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2C0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C0_NS").finish()
    }
}
#[doc = "I2C0_NS Registers"]
pub mod i2c0_ns;
#[doc = "WDOG0_NS Registers"]
pub struct WDOG0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for WDOG0_NS {}
impl WDOG0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdog0_ns::RegisterBlock = 0x5a01_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdog0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for WDOG0_NS {
    type Target = wdog0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for WDOG0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WDOG0_NS").finish()
    }
}
#[doc = "WDOG0_NS Registers"]
pub mod wdog0_ns;
#[doc = "AMUXCP0_NS Registers"]
pub struct AMUXCP0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for AMUXCP0_NS {}
impl AMUXCP0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const amuxcp0_ns::RegisterBlock = 0x5a02_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const amuxcp0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for AMUXCP0_NS {
    type Target = amuxcp0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for AMUXCP0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AMUXCP0_NS").finish()
    }
}
#[doc = "AMUXCP0_NS Registers"]
pub mod amuxcp0_ns;
#[doc = "EUART0_NS Registers"]
pub struct EUART0_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for EUART0_NS {}
impl EUART0_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const euart0_ns::RegisterBlock = 0x5a03_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const euart0_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for EUART0_NS {
    type Target = euart0_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for EUART0_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EUART0_NS").finish()
    }
}
#[doc = "EUART0_NS Registers"]
pub mod euart0_ns;
#[doc = "CRYPTOACC_NS Registers"]
pub struct CRYPTOACC_NS {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_NS {}
impl CRYPTOACC_NS {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_ns::RegisterBlock = 0x5c02_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_ns::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_NS {
    type Target = cryptoacc_ns::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_NS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_NS").finish()
    }
}
#[doc = "CRYPTOACC_NS Registers"]
pub mod cryptoacc_ns;
#[doc = "CRYPTOACC_NS_RNGCTRL Registers"]
pub struct CRYPTOACC_NS_RNGCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_NS_RNGCTRL {}
impl CRYPTOACC_NS_RNGCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_ns_rngctrl::RegisterBlock = 0x5c02_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_ns_rngctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_NS_RNGCTRL {
    type Target = cryptoacc_ns_rngctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_NS_RNGCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_NS_RNGCTRL").finish()
    }
}
#[doc = "CRYPTOACC_NS_RNGCTRL Registers"]
pub mod cryptoacc_ns_rngctrl;
#[doc = "CRYPTOACC_NS_PKCTRL Registers"]
pub struct CRYPTOACC_NS_PKCTRL {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for CRYPTOACC_NS_PKCTRL {}
impl CRYPTOACC_NS_PKCTRL {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const cryptoacc_ns_pkctrl::RegisterBlock = 0x5c02_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const cryptoacc_ns_pkctrl::RegisterBlock {
        Self::PTR
    }
}
impl Deref for CRYPTOACC_NS_PKCTRL {
    type Target = cryptoacc_ns_pkctrl::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for CRYPTOACC_NS_PKCTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYPTOACC_NS_PKCTRL").finish()
    }
}
#[doc = "CRYPTOACC_NS_PKCTRL Registers"]
pub mod cryptoacc_ns_pkctrl;
#[doc = "DEVINFO Registers"]
pub struct DEVINFO {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for DEVINFO {}
impl DEVINFO {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const devinfo::RegisterBlock = 0x0fe0_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const devinfo::RegisterBlock {
        Self::PTR
    }
}
impl Deref for DEVINFO {
    type Target = devinfo::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for DEVINFO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DEVINFO").finish()
    }
}
#[doc = "DEVINFO Registers"]
pub mod devinfo;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r"All the peripherals"]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "EMU_S"]
    pub EMU_S: EMU_S,
    #[doc = "CMU_S"]
    pub CMU_S: CMU_S,
    #[doc = "HFXO0_S"]
    pub HFXO0_S: HFXO0_S,
    #[doc = "HFRCO0_S"]
    pub HFRCO0_S: HFRCO0_S,
    #[doc = "FSRCO_S"]
    pub FSRCO_S: FSRCO_S,
    #[doc = "DPLL0_S"]
    pub DPLL0_S: DPLL0_S,
    #[doc = "LFXO_S"]
    pub LFXO_S: LFXO_S,
    #[doc = "LFRCO_S"]
    pub LFRCO_S: LFRCO_S,
    #[doc = "ULFRCO_S"]
    pub ULFRCO_S: ULFRCO_S,
    #[doc = "MSC_S"]
    pub MSC_S: MSC_S,
    #[doc = "ICACHE0_S"]
    pub ICACHE0_S: ICACHE0_S,
    #[doc = "PRS_S"]
    pub PRS_S: PRS_S,
    #[doc = "GPIO_S"]
    pub GPIO_S: GPIO_S,
    #[doc = "LDMA_S"]
    pub LDMA_S: LDMA_S,
    #[doc = "LDMAXBAR_S"]
    pub LDMAXBAR_S: LDMAXBAR_S,
    #[doc = "TIMER0_S"]
    pub TIMER0_S: TIMER0_S,
    #[doc = "TIMER1_S"]
    pub TIMER1_S: TIMER1_S,
    #[doc = "TIMER2_S"]
    pub TIMER2_S: TIMER2_S,
    #[doc = "TIMER3_S"]
    pub TIMER3_S: TIMER3_S,
    #[doc = "TIMER4_S"]
    pub TIMER4_S: TIMER4_S,
    #[doc = "USART0_S"]
    pub USART0_S: USART0_S,
    #[doc = "USART1_S"]
    pub USART1_S: USART1_S,
    #[doc = "BURTC_S"]
    pub BURTC_S: BURTC_S,
    #[doc = "I2C1_S"]
    pub I2C1_S: I2C1_S,
    #[doc = "SYSCFG_S_CFGNS"]
    pub SYSCFG_S_CFGNS: SYSCFG_S_CFGNS,
    #[doc = "SYSCFG_S"]
    pub SYSCFG_S: SYSCFG_S,
    #[doc = "BURAM_S"]
    pub BURAM_S: BURAM_S,
    #[doc = "GPCRC_S"]
    pub GPCRC_S: GPCRC_S,
    #[doc = "DCDC_S"]
    pub DCDC_S: DCDC_S,
    #[doc = "PDM_S"]
    pub PDM_S: PDM_S,
    #[doc = "SMU_S"]
    pub SMU_S: SMU_S,
    #[doc = "SMU_S_CFGNS"]
    pub SMU_S_CFGNS: SMU_S_CFGNS,
    #[doc = "RTCC_S"]
    pub RTCC_S: RTCC_S,
    #[doc = "LETIMER0_S"]
    pub LETIMER0_S: LETIMER0_S,
    #[doc = "IADC0_S"]
    pub IADC0_S: IADC0_S,
    #[doc = "I2C0_S"]
    pub I2C0_S: I2C0_S,
    #[doc = "WDOG0_S"]
    pub WDOG0_S: WDOG0_S,
    #[doc = "AMUXCP0_S"]
    pub AMUXCP0_S: AMUXCP0_S,
    #[doc = "EUART0_S"]
    pub EUART0_S: EUART0_S,
    #[doc = "CRYPTOACC_S"]
    pub CRYPTOACC_S: CRYPTOACC_S,
    #[doc = "CRYPTOACC_S_RNGCTRL"]
    pub CRYPTOACC_S_RNGCTRL: CRYPTOACC_S_RNGCTRL,
    #[doc = "CRYPTOACC_S_PKCTRL"]
    pub CRYPTOACC_S_PKCTRL: CRYPTOACC_S_PKCTRL,
    #[doc = "EMU_NS"]
    pub EMU_NS: EMU_NS,
    #[doc = "CMU_NS"]
    pub CMU_NS: CMU_NS,
    #[doc = "HFXO0_NS"]
    pub HFXO0_NS: HFXO0_NS,
    #[doc = "HFRCO0_NS"]
    pub HFRCO0_NS: HFRCO0_NS,
    #[doc = "FSRCO_NS"]
    pub FSRCO_NS: FSRCO_NS,
    #[doc = "DPLL0_NS"]
    pub DPLL0_NS: DPLL0_NS,
    #[doc = "LFXO_NS"]
    pub LFXO_NS: LFXO_NS,
    #[doc = "LFRCO_NS"]
    pub LFRCO_NS: LFRCO_NS,
    #[doc = "ULFRCO_NS"]
    pub ULFRCO_NS: ULFRCO_NS,
    #[doc = "MSC_NS"]
    pub MSC_NS: MSC_NS,
    #[doc = "ICACHE0_NS"]
    pub ICACHE0_NS: ICACHE0_NS,
    #[doc = "PRS_NS"]
    pub PRS_NS: PRS_NS,
    #[doc = "GPIO_NS"]
    pub GPIO_NS: GPIO_NS,
    #[doc = "LDMA_NS"]
    pub LDMA_NS: LDMA_NS,
    #[doc = "LDMAXBAR_NS"]
    pub LDMAXBAR_NS: LDMAXBAR_NS,
    #[doc = "TIMER0_NS"]
    pub TIMER0_NS: TIMER0_NS,
    #[doc = "TIMER1_NS"]
    pub TIMER1_NS: TIMER1_NS,
    #[doc = "TIMER2_NS"]
    pub TIMER2_NS: TIMER2_NS,
    #[doc = "TIMER3_NS"]
    pub TIMER3_NS: TIMER3_NS,
    #[doc = "TIMER4_NS"]
    pub TIMER4_NS: TIMER4_NS,
    #[doc = "USART0_NS"]
    pub USART0_NS: USART0_NS,
    #[doc = "USART1_NS"]
    pub USART1_NS: USART1_NS,
    #[doc = "BURTC_NS"]
    pub BURTC_NS: BURTC_NS,
    #[doc = "I2C1_NS"]
    pub I2C1_NS: I2C1_NS,
    #[doc = "SYSCFG_NS_CFGNS"]
    pub SYSCFG_NS_CFGNS: SYSCFG_NS_CFGNS,
    #[doc = "SYSCFG_NS"]
    pub SYSCFG_NS: SYSCFG_NS,
    #[doc = "BURAM_NS"]
    pub BURAM_NS: BURAM_NS,
    #[doc = "GPCRC_NS"]
    pub GPCRC_NS: GPCRC_NS,
    #[doc = "DCDC_NS"]
    pub DCDC_NS: DCDC_NS,
    #[doc = "PDM_NS"]
    pub PDM_NS: PDM_NS,
    #[doc = "SMU_NS"]
    pub SMU_NS: SMU_NS,
    #[doc = "SMU_NS_CFGNS"]
    pub SMU_NS_CFGNS: SMU_NS_CFGNS,
    #[doc = "RTCC_NS"]
    pub RTCC_NS: RTCC_NS,
    #[doc = "LETIMER0_NS"]
    pub LETIMER0_NS: LETIMER0_NS,
    #[doc = "IADC0_NS"]
    pub IADC0_NS: IADC0_NS,
    #[doc = "I2C0_NS"]
    pub I2C0_NS: I2C0_NS,
    #[doc = "WDOG0_NS"]
    pub WDOG0_NS: WDOG0_NS,
    #[doc = "AMUXCP0_NS"]
    pub AMUXCP0_NS: AMUXCP0_NS,
    #[doc = "EUART0_NS"]
    pub EUART0_NS: EUART0_NS,
    #[doc = "CRYPTOACC_NS"]
    pub CRYPTOACC_NS: CRYPTOACC_NS,
    #[doc = "CRYPTOACC_NS_RNGCTRL"]
    pub CRYPTOACC_NS_RNGCTRL: CRYPTOACC_NS_RNGCTRL,
    #[doc = "CRYPTOACC_NS_PKCTRL"]
    pub CRYPTOACC_NS_PKCTRL: CRYPTOACC_NS_PKCTRL,
    #[doc = "DEVINFO"]
    pub DEVINFO: DEVINFO,
}
impl Peripherals {
    #[doc = r"Returns all the peripherals *once*"]
    #[inline]
    pub fn take() -> Option<Self> {
        cortex_m::interrupt::free(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                None
            } else {
                Some(unsafe { Peripherals::steal() })
            }
        })
    }
    #[doc = r"Unchecked version of `Peripherals::take`"]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            EMU_S: EMU_S {
                _marker: PhantomData,
            },
            CMU_S: CMU_S {
                _marker: PhantomData,
            },
            HFXO0_S: HFXO0_S {
                _marker: PhantomData,
            },
            HFRCO0_S: HFRCO0_S {
                _marker: PhantomData,
            },
            FSRCO_S: FSRCO_S {
                _marker: PhantomData,
            },
            DPLL0_S: DPLL0_S {
                _marker: PhantomData,
            },
            LFXO_S: LFXO_S {
                _marker: PhantomData,
            },
            LFRCO_S: LFRCO_S {
                _marker: PhantomData,
            },
            ULFRCO_S: ULFRCO_S {
                _marker: PhantomData,
            },
            MSC_S: MSC_S {
                _marker: PhantomData,
            },
            ICACHE0_S: ICACHE0_S {
                _marker: PhantomData,
            },
            PRS_S: PRS_S {
                _marker: PhantomData,
            },
            GPIO_S: GPIO_S {
                _marker: PhantomData,
            },
            LDMA_S: LDMA_S {
                _marker: PhantomData,
            },
            LDMAXBAR_S: LDMAXBAR_S {
                _marker: PhantomData,
            },
            TIMER0_S: TIMER0_S {
                _marker: PhantomData,
            },
            TIMER1_S: TIMER1_S {
                _marker: PhantomData,
            },
            TIMER2_S: TIMER2_S {
                _marker: PhantomData,
            },
            TIMER3_S: TIMER3_S {
                _marker: PhantomData,
            },
            TIMER4_S: TIMER4_S {
                _marker: PhantomData,
            },
            USART0_S: USART0_S {
                _marker: PhantomData,
            },
            USART1_S: USART1_S {
                _marker: PhantomData,
            },
            BURTC_S: BURTC_S {
                _marker: PhantomData,
            },
            I2C1_S: I2C1_S {
                _marker: PhantomData,
            },
            SYSCFG_S_CFGNS: SYSCFG_S_CFGNS {
                _marker: PhantomData,
            },
            SYSCFG_S: SYSCFG_S {
                _marker: PhantomData,
            },
            BURAM_S: BURAM_S {
                _marker: PhantomData,
            },
            GPCRC_S: GPCRC_S {
                _marker: PhantomData,
            },
            DCDC_S: DCDC_S {
                _marker: PhantomData,
            },
            PDM_S: PDM_S {
                _marker: PhantomData,
            },
            SMU_S: SMU_S {
                _marker: PhantomData,
            },
            SMU_S_CFGNS: SMU_S_CFGNS {
                _marker: PhantomData,
            },
            RTCC_S: RTCC_S {
                _marker: PhantomData,
            },
            LETIMER0_S: LETIMER0_S {
                _marker: PhantomData,
            },
            IADC0_S: IADC0_S {
                _marker: PhantomData,
            },
            I2C0_S: I2C0_S {
                _marker: PhantomData,
            },
            WDOG0_S: WDOG0_S {
                _marker: PhantomData,
            },
            AMUXCP0_S: AMUXCP0_S {
                _marker: PhantomData,
            },
            EUART0_S: EUART0_S {
                _marker: PhantomData,
            },
            CRYPTOACC_S: CRYPTOACC_S {
                _marker: PhantomData,
            },
            CRYPTOACC_S_RNGCTRL: CRYPTOACC_S_RNGCTRL {
                _marker: PhantomData,
            },
            CRYPTOACC_S_PKCTRL: CRYPTOACC_S_PKCTRL {
                _marker: PhantomData,
            },
            EMU_NS: EMU_NS {
                _marker: PhantomData,
            },
            CMU_NS: CMU_NS {
                _marker: PhantomData,
            },
            HFXO0_NS: HFXO0_NS {
                _marker: PhantomData,
            },
            HFRCO0_NS: HFRCO0_NS {
                _marker: PhantomData,
            },
            FSRCO_NS: FSRCO_NS {
                _marker: PhantomData,
            },
            DPLL0_NS: DPLL0_NS {
                _marker: PhantomData,
            },
            LFXO_NS: LFXO_NS {
                _marker: PhantomData,
            },
            LFRCO_NS: LFRCO_NS {
                _marker: PhantomData,
            },
            ULFRCO_NS: ULFRCO_NS {
                _marker: PhantomData,
            },
            MSC_NS: MSC_NS {
                _marker: PhantomData,
            },
            ICACHE0_NS: ICACHE0_NS {
                _marker: PhantomData,
            },
            PRS_NS: PRS_NS {
                _marker: PhantomData,
            },
            GPIO_NS: GPIO_NS {
                _marker: PhantomData,
            },
            LDMA_NS: LDMA_NS {
                _marker: PhantomData,
            },
            LDMAXBAR_NS: LDMAXBAR_NS {
                _marker: PhantomData,
            },
            TIMER0_NS: TIMER0_NS {
                _marker: PhantomData,
            },
            TIMER1_NS: TIMER1_NS {
                _marker: PhantomData,
            },
            TIMER2_NS: TIMER2_NS {
                _marker: PhantomData,
            },
            TIMER3_NS: TIMER3_NS {
                _marker: PhantomData,
            },
            TIMER4_NS: TIMER4_NS {
                _marker: PhantomData,
            },
            USART0_NS: USART0_NS {
                _marker: PhantomData,
            },
            USART1_NS: USART1_NS {
                _marker: PhantomData,
            },
            BURTC_NS: BURTC_NS {
                _marker: PhantomData,
            },
            I2C1_NS: I2C1_NS {
                _marker: PhantomData,
            },
            SYSCFG_NS_CFGNS: SYSCFG_NS_CFGNS {
                _marker: PhantomData,
            },
            SYSCFG_NS: SYSCFG_NS {
                _marker: PhantomData,
            },
            BURAM_NS: BURAM_NS {
                _marker: PhantomData,
            },
            GPCRC_NS: GPCRC_NS {
                _marker: PhantomData,
            },
            DCDC_NS: DCDC_NS {
                _marker: PhantomData,
            },
            PDM_NS: PDM_NS {
                _marker: PhantomData,
            },
            SMU_NS: SMU_NS {
                _marker: PhantomData,
            },
            SMU_NS_CFGNS: SMU_NS_CFGNS {
                _marker: PhantomData,
            },
            RTCC_NS: RTCC_NS {
                _marker: PhantomData,
            },
            LETIMER0_NS: LETIMER0_NS {
                _marker: PhantomData,
            },
            IADC0_NS: IADC0_NS {
                _marker: PhantomData,
            },
            I2C0_NS: I2C0_NS {
                _marker: PhantomData,
            },
            WDOG0_NS: WDOG0_NS {
                _marker: PhantomData,
            },
            AMUXCP0_NS: AMUXCP0_NS {
                _marker: PhantomData,
            },
            EUART0_NS: EUART0_NS {
                _marker: PhantomData,
            },
            CRYPTOACC_NS: CRYPTOACC_NS {
                _marker: PhantomData,
            },
            CRYPTOACC_NS_RNGCTRL: CRYPTOACC_NS_RNGCTRL {
                _marker: PhantomData,
            },
            CRYPTOACC_NS_PKCTRL: CRYPTOACC_NS_PKCTRL {
                _marker: PhantomData,
            },
            DEVINFO: DEVINFO {
                _marker: PhantomData,
            },
        }
    }
}
